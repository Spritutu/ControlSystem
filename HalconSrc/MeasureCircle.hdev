<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>*calibration</c>
<l>ImgPath := '3d_machine_vision/calib/'</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 652, 494, 'black', WindowHandle)</l>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<l>OpSystem := environment('OS')</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Calibrate the camera.</c>
<c>* </c>
<l>StartCamPar := [0.016,0,0.0000074,0.0000074,326,247,652,494]</l>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', StartCamPar)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, 'caltab_30mm.descr')</l>
<l>NumImages := 10</l>
<c>* Note, we do not use the image from which the pose of the measurement plane can be derived</c>
<l>for I := 1 to NumImages by 1</l>
<l>    read_image (Image, ImgPath + 'calib_' + I$'02d')</l>
<l>    dev_display (Image)</l>
<l>    find_calib_object (Image, CalibDataID, 0, 0, I, [], [])</l>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, I)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Caltab)</l>
<l>endfor</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParam)</l>
<c>* Write the internal camera parameters to a file</c>
<l>write_cam_par (CamParam, 'camera_parameters.dat')</l>
<l>Message := 'Interior camera parameters have'</l>
<l>Message[1] := 'been written to file'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'red', 'false')</l>
<l>clear_calib_data (CalibDataID)</l>
<l>stop()</l>
<c></c>
<c>*pose</c>
<l>ImgPath := '3d_machine_vision/calib/'</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 652, 494, 'black', WindowHandle)</l>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (1)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Read the internal camera parameters from file</c>
<l>try</l>
<l>    read_cam_par ('camera_parameters.dat', CamParam)</l>
<l>catch (Exception)</l>
<c>    * run 'camera_calibration_internal.hdev' first to generate camera</c>
<c>    * parameter file 'camera_parameters.dat'</c>
<l>    stop ()</l>
<l>endtry</l>
<c>* </c>
<c>* Determine the external camera parameters and world coodinates from image points</c>
<c>* </c>
<c>* The external camera parameters can be determined from an image, where the</c>
<c>* calibration plate is positioned directly on the measurement plane</c>
<l>read_image (Image, ImgPath + 'calib_11')</l>
<l>dev_display (Image)</l>
<l>CaltabName := 'caltab_30mm.descr'</l>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<c>* Here, the final camera parameters are already known and can be used instead</c>
<c>* of the starting values used in the program 'camera_calibration_internal.hdev'</c>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', CamParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CaltabName)</l>
<l>find_calib_object (Image, CalibDataID, 0, 0, 1, [], [])</l>
<l>get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 1)</l>
<l>get_calib_data_observ_points (CalibDataID, 0, 0, 1, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<c></c>
<l>dev_set_color ('green')</l>
<l>dev_display (Caltab)</l>
<l>dev_set_color ('red')</l>
<l>disp_caltab (WindowHandle, CaltabName, CamParam, PoseForCalibrationPlate, 1)</l>
<l>dev_set_line_width (3)</l>
<l>disp_circle (WindowHandle, RCoord, CCoord, gen_tuple_const(|RCoord|,1.5))</l>
<l>* caltab_points (CaltabName, X, Y, Z)</l>
<l>* calibrate_cameras (CalibDataID, Error)</l>
<c>* To take the thickness of the calibration plate into account, the z-value</c>
<c>* of the origin given by the camera pose has to be translated by the</c>
<c>* thickness of the calibration plate.</c>
<c>* Deactivate the following line if you do not want to add the correction.</c>
<l>set_origin_pose (PoseForCalibrationPlate, 0, 0, 0.00075, PoseForCalibrationPlate)</l>
<l>write_pose (PoseForCalibrationPlate, 'pose_from_PoseForCalibrationPlate.dat')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<c></c>
<c>*Cal Accuracy</c>
<l>ImgPath := '3d_machine_vision/calib/'</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 652, 494, 'black', WindowHandle)</l>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (1)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Read the internal camera parameters from file</c>
<l>try</l>
<l>    read_cam_par ('camera_parameters.dat', CamParam)</l>
<l>catch (Exception)</l>
<c>    * run 'camera_calibration_internal.hdev' first to generate camera</c>
<c>    * parameter file 'camera_parameters.dat'</c>
<l>    stop ()</l>
<l>endtry</l>
<c>* </c>
<c>* Determine the external camera parameters and world coodinates from image points</c>
<c>* </c>
<c>* The external camera parameters can be determined from an image, where the</c>
<c>* calibration plate is positioned directly on the measurement plane</c>
<l>read_image (Image, ImgPath + 'calib_11')</l>
<l>dev_display (Image)</l>
<l>CaltabName := 'caltab_30mm.descr'</l>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<c>* Here, the final camera parameters are already known and can be used instead</c>
<c>* of the starting values used in the program 'camera_calibration_internal.hdev'</c>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', CamParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CaltabName)</l>
<l>find_calib_object (Image, CalibDataID, 0, 0, 1, [], [])</l>
<l>get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 1)</l>
<l>get_calib_data_observ_points (CalibDataID, 0, 0, 1, RCoord, CCoord, Index, Posenotused)</l>
<c></c>
<c></c>
<l>disp_cross (WindowHandle, RCoord, CCoord, 20, rad(45))</l>
<l>image_points_to_world_plane (CamParam, PoseForCalibrationPlate, RCoord, CCoord, 'mm', X1, Y1)</l>
<c></c>
<l>distance_pp (X1[0:5], Y1[0:5], X1[1:6], Y1[1:6], Distance)</l>
<c></c>
<c></c>
<l>tuple_mean (Distance, MeanDistance)</l>
<l>tuple_deviation (Distance, DeviationDistance)</l>
<l>disp_message (WindowHandle, 'Mean distance: ' + MeanDistance$'.3f' + 'mm +/- ' + DeviationDistance$'.3f' + 'mm', 'window', 30, 60, 'yellow', 'false')</l>
<c></c>
<c></c>
<l>stop ()</l>
<c></c>
<c>*Detect Circle</c>
<l>dev_close_window ()</l>
<l>*read_image (Rim, 'rim')</l>
<l>read_image(Rim, 'E:/Software/MachineVision/Project/mfc project/CameraMeasurement/Bin/Images/MeasureImages/Test_Image.PNG')</l>
<l>get_image_size (Rim, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowID)</l>
<l>dev_display (Rim)</l>
<l>set_display_font (WindowID, 14, 'mono', 'false', 'false')</l>
<c>* Segment the circular holes</c>
<c>* The alpha parameter was choosen different than the default value</c>
<c>* to ensure stronger smoothing and thusmore connected edge components</c>
<l>edges_sub_pix (Rim, Edges, 'canny', 4, 20, 40)</l>
<l>select_shape_xld (Edges, Holes, 'circularity', 'and', 0.7, 1.0)</l>
<l>sort_contours_xld (Holes, Holes, 'upper_left', 'true', 'row')</l>
<c>* Determine the midpoints</c>
<l>smallest_circle_xld (Holes, Row, Column, Radius)</l>
<l>count_obj (Holes, Number)</l>
<c></c>
<l>dev_set_color ('green')</l>
<l>disp_cross (WindowID, Height/2, Width/2,  10, 0)</l>
<c></c>
<l>    image_points_to_world_plane (CamParam, PoseForCalibrationPlate, Height/2, Width/2,  1, X1, Y1)</l>
<l>    disp_message (WindowHandle, 'X = ' + X1, 'window', Height/2 + 10, Width/2,  'red', 'false')</l>
<l>    disp_message (WindowHandle, 'Y = ' + Y1, 'window', Height/2 + 30, Width/2,  'red', 'false')</l>
<c></c>
<l>dev_set_color ('yellow')</l>
<c>* For all boles ...</c>
<l>for i := 1 to Number by 1</l>
<l>    select_obj (Holes, Hole, i)</l>
<l>    dev_display (Hole)</l>
<c></c>
<l>    disp_cross (WindowID, Row[i - 1], Column[i - 1], 6, 0)</l>
<c>    </c>
<l>    image_points_to_world_plane (CamParam, PoseForCalibrationPlate, Row[i - 1], Column[i - 1], 1, X1, Y1)</l>
<l>    disp_message (WindowHandle, 'X = ' + X1, 'window', Row[i - 1] + 10, Column[i - 1], 'red', 'false')</l>
<l>    disp_message (WindowHandle, 'Y = ' + Y1, 'window', Row[i - 1] + 30, Column[i - 1], 'red', 'false')</l>
<c>    </c>
<l>    disp_continue_message (WindowID, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
